@use "../../variables/card" as *;

@function bfg-card-get-var($type, $prop) {
  @return "--bfg-card-" + if($type == "", "",  $type + "-") + $prop;
}

@mixin bfg-card-define-vars($type, $rules) {
  @each $prop, $value in $rules {
    #{bfg-card-get-var($type, $prop)}: #{$value};
  }
}

@function bfg-card-get-vars-map($type, $rules) {
  $map: ();
  @each $prop, $value in $rules {
    $map: map-merge($map, (
      #{$prop}: var(#{bfg-card-get-var($type, $prop)})
    ));
  }
  @return $map;
}

@function bfg-card-map-includes($map, $keys...) {
  @each $key in $keys {
    @if map-has-key($map, $key) {
      @return true;
    }
  }
  @return false;
}

@mixin bfg-card($type, $settings: ()) {
  :root {
    @if $settings == () {
      @include bfg-card-define-vars("", $bfg-card-default);
    } @else {
      @include bfg-card-define-vars($type, $settings);
    }
  }

  $vars: map-merge(
    bfg-card-get-vars-map("", $bfg-card-default), 
    bfg-card-get-vars-map($type, $settings)
  );

  $input: if($settings == (), $bfg-card-default, $settings);

  $selector: if($settings == (), "[bfg-card]", '[bfg-card~="#{$type}"]');

  #{$selector} {
    [bfg-card__action],
    [bfg-card__header] {
      @if bfg-card-map-includes($input, box-shadow) {
        box-shadow: map-get($vars, box-shadow);
      }
      @if bfg-card-map-includes($input, border-width, header-border-color) {
        border: map-get($vars, border-width) solid map-get($vars, header-border-color);
      }
      @if bfg-card-map-includes($input, header-border-bottom-width) {
        border-bottom-width: map-get($vars, header-border-bottom-width);
      }
      @if bfg-card-map-includes($input, header-background-color) {
        background: map-get($vars, header-background-color);
      }
      @if bfg-card-map-includes($input, header-color) {
        color: map-get($vars, header-color);
      }
      @if bfg-card-map-includes($input, header-border-bottom-width, border-width) {
        line-height: calc(var(--bfg-card-header-height) - #{map-get($vars, header-border-bottom-width)} - #{map-get($vars, border-width)});
      }
    }

    [bfg-card__action] {
      @if bfg-card-map-includes($input, border-radius) {
        border-top-right-radius: map-get($vars, border-radius);
      }
    }

    [bfg-card__header] {
      @if bfg-card-map-includes($input, border-radius) {
        border-radius: map-get($vars, border-radius) map-get($vars, border-radius) 0 0;
      }
    }

    [bfg-card__content] {
      @if bfg-card-map-includes($input, box-shadow) {
        box-shadow: map-get($vars, box-shadow);
      }
      @if bfg-card-map-includes($input, border-radius) {
        border-radius: map-get($vars, border-radius);
      }
      @if bfg-card-map-includes($input, border-width, content-border-color) {
        border: map-get($vars, border-width) solid map-get($vars, content-border-color);
      }
      @if bfg-card-map-includes($input, content-background-color) {
        background: map-get($vars, content-background-color);
      }
      @if bfg-card-map-includes($input, content-color) {
        color: map-get($vars, content-color);
      }
    }
  }
}
